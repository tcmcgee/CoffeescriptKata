// Generated by CoffeeScript 1.9.3
(function() {
  var root,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.evalu = function() {
    var equation;
    equation = $(".equation").val();
    equation = equation.replace(/ans/, $(".results").text());
    return calculate(equation);
  };

  root.ans = function() {
    var results;
    results = $(".results").text();
    return $(".equation").val('ans');
  };

  root.calculate = function(equation) {
    while (root.hasNext(equation)) {
      equation = root.pemdas(equation);
    }
    root.set_results_html(equation);
    return +equation;
  };

  root.set_results_html = function(number) {
    var e;
    try {
      return $(".results").text(number);
    } catch (_error) {
      e = _error;
      return console.log("NO JQUERY FOR TESTS: " + e);
    }
  };

  root.nextOp = function(equation) {
    var indexdiv, indexmin, indexmult, indexplus, indexpow;
    indexpow = equation.indexOf('^');
    indexmult = equation.indexOf('*');
    indexdiv = equation.indexOf('/');
    indexplus = equation.indexOf('+');
    indexmin = equation.indexOf('-');
    if (indexpow !== -1) {
      return '^';
    } else if (indexmult >= 0 && indexdiv >= 0) {
      if (indexmult > indexdiv) {
        return '/';
      } else {
        return '*';
      }
    } else if (indexmult >= 0) {
      return '*';
    } else if (indexdiv >= 0) {
      return '/';
    } else if (indexplus >= 0 && indexmin >= 0) {
      if (indexplus > indexmin) {
        return '-';
      } else {
        return '+';
      }
    } else if (indexplus >= 0) {
      return '+';
    } else if (indexmin >= 0) {
      return '-';
    } else {
      return -1;
    }
  };

  root.pemdas = function(equation) {
    var index, next, next_index, op;
    equation = "~" + equation + "~";
    op = root.nextOp(equation);
    if (op !== -1) {
      index = equation.indexOf(op);
      next = root.getnext(op, equation, index);
      next_index = equation.indexOf(next);
      equation = equation.substring(0, next_index) + (root.math(next, op)) + equation.substring(next_index + next.length);
      next = equation.substring(1, equation.length - 1);
      return next;
    } else {
      return equation;
    }
  };

  root.getnext = function(op, equation, index) {
    var after, before, next;
    before = root.before(equation, index) + 1;
    after = root.after(equation, index);
    next = equation.substring(before, after);
    return next;
  };

  root.hasNext = function(equation) {
    var has;
    has = false;
    if (equation.indexOf('^') !== -1) {
      has = true;
    }
    if (equation.indexOf('*') !== -1) {
      has = true;
    }
    if (equation.indexOf('/') !== -1) {
      has = true;
    }
    if (equation.indexOf('+') !== -1) {
      has = true;
    }
    if (equation.indexOf('-') !== -1) {
      has = true;
    }
    return has;
  };

  root.math = function(next, op) {
    var num1, num2, op_index;
    op_index = next.indexOf(op);
    num1 = next.substring(0, op_index);
    num2 = next.substring(op_index + 1);
    if (op === '^') {
      return Math.pow(num1, num2);
    } else if (op === '*') {
      return num1 * num2;
    } else if (op === '/') {
      return num1 / num2;
    } else if (op === '+') {
      return +num1 + +num2;
    } else if (op === '-') {
      return num1 - num2;
    }
  };

  root.before = function(equation, index, i) {
    var numbers, ref;
    if (i == null) {
      i = -1;
    }
    numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ' ', '.'];
    if (ref = equation.charAt(index + i), indexOf.call(numbers, ref) >= 0) {
      i = i - 1;
      return root.before(equation, index, i);
    } else {
      return index + i;
    }
  };

  root.after = function(equation, index, i) {
    var numbers, ref;
    if (i == null) {
      i = 1;
    }
    equation = equation + '~';
    numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ' ', '.'];
    if (ref = equation.charAt(index + i), indexOf.call(numbers, ref) >= 0) {
      return root.after(equation, index, i + 1);
    } else {
      return index + i;
    }
  };

}).call(this);
